using System;
using System.Collections.Generic;
using Calendar.Enums;
using Calendar.Impl;
using Xunit;

namespace CalendarTests
{
    public class PayDatesTests
    {
        private readonly DatesService _service;
        public PayDatesTests()
        {
            _service = new DatesService();
        }

        [Fact]
        public void GeneratePayDates_EndOfMonth()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/31/2021"), Convert.ToDateTime("10/31/2022"));
            var expected = new[]
            {
                "11/30/2021",
                "12/31/2021",
                "01/31/2022",
                "02/28/2022",
                "03/31/2022",
                "04/30/2022",
                "05/31/2022",
                "06/30/2022",
                "07/31/2022",
                "08/31/2022",
                "09/30/2022"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_StartOfMonth()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/01/2021"), Convert.ToDateTime("10/01/2022"));
            var expected = new[]
            {
                "11/01/2021",
                "12/01/2021",
                "01/01/2022",
                "02/01/2022",
                "03/01/2022",
                "04/01/2022",
                "05/01/2022",
                "06/01/2022",
                "07/01/2022",
                "08/01/2022",
                "09/01/2022"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_Leap28th()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/28/2019"), Convert.ToDateTime("10/28/2024"));
            var expected = new[]
            {
                "11/28/2019", "12/28/2019", "01/28/2020", "02/28/2020", "03/28/2020", "04/28/2020", "05/28/2020", "06/28/2020", "07/28/2020",
                "08/28/2020", "09/28/2020", "10/28/2020", "11/28/2020", "12/28/2020", "01/28/2021", "02/28/2021", "03/28/2021", "04/28/2021",
                "05/28/2021", "06/28/2021", "07/28/2021", "08/28/2021", "09/28/2021", "10/28/2021", "11/28/2021", "12/28/2021", "01/28/2022",
                "02/28/2022", "03/28/2022", "04/28/2022", "05/28/2022", "06/28/2022", "07/28/2022", "08/28/2022", "09/28/2022", "10/28/2022",
                "11/28/2022", "12/28/2022", "01/28/2023", "02/28/2023", "03/28/2023", "04/28/2023", "05/28/2023", "06/28/2023", "07/28/2023",
                "08/28/2023", "09/28/2023", "10/28/2023", "11/28/2023", "12/28/2023", "01/28/2024", "02/28/2024", "03/28/2024", "04/28/2024",
                "05/28/2024", "06/28/2024", "07/28/2024", "08/28/2024", "09/28/2024"
            };
            CheckDates(expected, result);
        }
        
        [Fact]
        public void GeneratePayDates_Leap29th()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/29/2019"), Convert.ToDateTime("10/29/2024"));
            var expected = new[]
            {
                "11/29/2019", "12/29/2019", "01/29/2020", "02/29/2020", "03/29/2020", "04/29/2020", "05/29/2020", "06/29/2020", "07/29/2020",
                "08/29/2020", "09/29/2020", "10/29/2020", "11/29/2020", "12/29/2020", "01/29/2021", "02/28/2021", "03/29/2021", "04/29/2021",
                "05/29/2021", "06/29/2021", "07/29/2021", "08/29/2021", "09/29/2021", "10/29/2021", "11/29/2021", "12/29/2021", "01/29/2022",
                "02/28/2022", "03/29/2022", "04/29/2022", "05/29/2022", "06/29/2022", "07/29/2022", "08/29/2022", "09/29/2022", "10/29/2022",
                "11/29/2022", "12/29/2022", "01/29/2023", "02/28/2023", "03/29/2023", "04/29/2023", "05/29/2023", "06/29/2023", "07/29/2023",
                "08/29/2023", "09/29/2023", "10/29/2023", "11/29/2023", "12/29/2023", "01/29/2024", "02/29/2024", "03/29/2024", "04/29/2024",
                "05/29/2024", "06/29/2024", "07/29/2024", "08/29/2024", "09/29/2024"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_Leap30th()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/30/2019"), Convert.ToDateTime("10/29/2024"));
            var expected = new[]
            {
                "11/30/2019", "12/30/2019", "01/30/2020", "02/29/2020", "03/30/2020", "04/30/2020", "05/30/2020", "06/30/2020", "07/30/2020",
                "08/30/2020", "09/30/2020", "10/30/2020", "11/30/2020", "12/30/2020", "01/30/2021", "02/28/2021", "03/30/2021", "04/30/2021",
                "05/30/2021", "06/30/2021", "07/30/2021", "08/30/2021", "09/30/2021", "10/30/2021", "11/30/2021", "12/30/2021", "01/30/2022",
                "02/28/2022", "03/30/2022", "04/30/2022", "05/30/2022", "06/30/2022", "07/30/2022", "08/30/2022", "09/30/2022", "10/30/2022",
                "11/30/2022", "12/30/2022", "01/30/2023", "02/28/2023", "03/30/2023", "04/30/2023", "05/30/2023", "06/30/2023", "07/30/2023",
                "08/30/2023", "09/30/2023", "10/30/2023", "11/30/2023", "12/30/2023", "01/30/2024", "02/29/2024", "03/30/2024", "04/30/2024",
                "05/30/2024", "06/30/2024", "07/30/2024", "08/30/2024", "09/30/2024"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_Leap31th()
        {
            var result = _service.GeneratePayDates(PayTypes.Monthly, Convert.ToDateTime("10/31/2019"), Convert.ToDateTime("10/29/2024"));
            var expected = new[]
            {
                "11/30/2019", "12/31/2019", "01/31/2020", "02/29/2020", "03/31/2020", "04/30/2020", "05/31/2020", "06/30/2020", "07/31/2020",
                "08/31/2020", "09/30/2020", "10/31/2020", "11/30/2020", "12/31/2020", "01/31/2021", "02/28/2021", "03/31/2021", "04/30/2021",
                "05/31/2021", "06/30/2021", "07/31/2021", "08/31/2021", "09/30/2021", "10/31/2021", "11/30/2021", "12/31/2021", "01/31/2022",
                "02/28/2022", "03/31/2022", "04/30/2022", "05/31/2022", "06/30/2022", "07/31/2022", "08/31/2022", "09/30/2022", "10/31/2022",
                "11/30/2022", "12/31/2022", "01/31/2023", "02/28/2023", "03/31/2023", "04/30/2023", "05/31/2023", "06/30/2023", "07/31/2023",
                "08/31/2023", "09/30/2023", "10/31/2023", "11/30/2023", "12/31/2023", "01/31/2024", "02/29/2024", "03/31/2024", "04/30/2024",
                "05/31/2024", "06/30/2024", "07/31/2024", "08/31/2024", "09/30/2024"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void Mod_Test()
        {
            var value = Convert.ToDecimal((1 / 2.0)) + 0.1M;
            Assert.Equal(0.6M, value);
            Assert.Equal(1, Convert.ToInt16(decimal.Round(value, MidpointRounding.AwayFromZero)));
        }

        [Fact]
        public void GeneratePayDates_SemiMonthly()
        {
            var result = _service.GeneratePayDates(PayTypes.SemiMonthly, Convert.ToDateTime("10/31/2019"), Convert.ToDateTime("10/28/2024"));
            var expected = new[]
            {
                "11/15/2019", "11/30/2019", "12/15/2019", "12/31/2019", "01/15/2020", "01/31/2020", "02/15/2020", "02/29/2020", "03/15/2020",
                "03/31/2020", "04/15/2020", "04/30/2020", "05/15/2020", "05/31/2020", "06/15/2020", "06/30/2020", "07/15/2020", "07/31/2020",
                "08/15/2020", "08/31/2020", "09/15/2020", "09/30/2020", "10/15/2020", "10/31/2020", "11/15/2020", "11/30/2020", "12/15/2020",
                "12/31/2020", "01/15/2021", "01/31/2021", "02/15/2021", "02/28/2021", "03/15/2021", "03/31/2021", "04/15/2021", "04/30/2021",
                "05/15/2021", "05/31/2021", "06/15/2021", "06/30/2021", "07/15/2021", "07/31/2021", "08/15/2021", "08/31/2021", "09/15/2021",
                "09/30/2021", "10/15/2021", "10/31/2021", "11/15/2021", "11/30/2021", "12/15/2021", "12/31/2021", "01/15/2022", "01/31/2022",
                "02/15/2022", "02/28/2022", "03/15/2022", "03/31/2022", "04/15/2022", "04/30/2022", "05/15/2022", "05/31/2022", "06/15/2022",
                "06/30/2022", "07/15/2022", "07/31/2022", "08/15/2022", "08/31/2022", "09/15/2022", "09/30/2022", "10/15/2022", "10/31/2022",
                "11/15/2022", "11/30/2022", "12/15/2022", "12/31/2022", "01/15/2023", "01/31/2023", "02/15/2023", "02/28/2023", "03/15/2023",
                "03/31/2023", "04/15/2023", "04/30/2023", "05/15/2023", "05/31/2023", "06/15/2023", "06/30/2023", "07/15/2023", "07/31/2023",
                "08/15/2023", "08/31/2023", "09/15/2023", "09/30/2023", "10/15/2023", "10/31/2023", "11/15/2023", "11/30/2023", "12/15/2023",
                "12/31/2023", "01/15/2024", "01/31/2024", "02/15/2024", "02/29/2024", "03/15/2024", "03/31/2024", "04/15/2024", "04/30/2024",
                "05/15/2024", "05/31/2024", "06/15/2024", "06/30/2024", "07/15/2024", "07/31/2024", "08/15/2024", "08/31/2024", "09/15/2024",
                "09/30/2024", "10/15/2024"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_SemiMonthly_LessThanMidDay()
        {
            var result = _service.GeneratePayDates(PayTypes.SemiMonthly, Convert.ToDateTime("10/31/2019"), Convert.ToDateTime("10/28/2024"));
            var expected = new[]
            {
                "11/15/2019", "11/30/2019", "12/15/2019", "12/31/2019", "01/15/2020", "01/31/2020", "02/15/2020", "02/29/2020", "03/15/2020",
                "03/31/2020", "04/15/2020", "04/30/2020", "05/15/2020", "05/31/2020", "06/15/2020", "06/30/2020", "07/15/2020", "07/31/2020",
                "08/15/2020", "08/31/2020", "09/15/2020", "09/30/2020", "10/15/2020", "10/31/2020", "11/15/2020", "11/30/2020", "12/15/2020",
                "12/31/2020", "01/15/2021", "01/31/2021", "02/15/2021", "02/28/2021", "03/15/2021", "03/31/2021", "04/15/2021", "04/30/2021",
                "05/15/2021", "05/31/2021", "06/15/2021", "06/30/2021", "07/15/2021", "07/31/2021", "08/15/2021", "08/31/2021", "09/15/2021",
                "09/30/2021", "10/15/2021", "10/31/2021", "11/15/2021", "11/30/2021", "12/15/2021", "12/31/2021", "01/15/2022", "01/31/2022",
                "02/15/2022", "02/28/2022", "03/15/2022", "03/31/2022", "04/15/2022", "04/30/2022", "05/15/2022", "05/31/2022", "06/15/2022",
                "06/30/2022", "07/15/2022", "07/31/2022", "08/15/2022", "08/31/2022", "09/15/2022", "09/30/2022", "10/15/2022", "10/31/2022",
                "11/15/2022", "11/30/2022", "12/15/2022", "12/31/2022", "01/15/2023", "01/31/2023", "02/15/2023", "02/28/2023", "03/15/2023",
                "03/31/2023", "04/15/2023", "04/30/2023", "05/15/2023", "05/31/2023", "06/15/2023", "06/30/2023", "07/15/2023", "07/31/2023",
                "08/15/2023", "08/31/2023", "09/15/2023", "09/30/2023", "10/15/2023", "10/31/2023", "11/15/2023", "11/30/2023", "12/15/2023",
                "12/31/2023", "01/15/2024", "01/31/2024", "02/15/2024", "02/29/2024", "03/15/2024", "03/31/2024", "04/15/2024", "04/30/2024",
                "05/15/2024", "05/31/2024", "06/15/2024", "06/30/2024", "07/15/2024", "07/31/2024", "08/15/2024", "08/31/2024", "09/15/2024",
                "09/30/2024", "10/15/2024"
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_SemiMonthly_MidDay()
        {
            var result = _service.GeneratePayDates(PayTypes.SemiMonthly, Convert.ToDateTime("11/15/2019"), Convert.ToDateTime("10/28/2024"));
            var expected = new[]
            {
                "11/30/2019", "12/15/2019", "12/31/2019", "01/15/2020", "01/31/2020", "02/15/2020", "02/29/2020", "03/15/2020",
                "03/31/2020", "04/15/2020", "04/30/2020", "05/15/2020", "05/31/2020", "06/15/2020", "06/30/2020", "07/15/2020", "07/31/2020",
                "08/15/2020", "08/31/2020", "09/15/2020", "09/30/2020", "10/15/2020", "10/31/2020", "11/15/2020", "11/30/2020", "12/15/2020",
                "12/31/2020", "01/15/2021", "01/31/2021", "02/15/2021", "02/28/2021", "03/15/2021", "03/31/2021", "04/15/2021", "04/30/2021",
                "05/15/2021", "05/31/2021", "06/15/2021", "06/30/2021", "07/15/2021", "07/31/2021", "08/15/2021", "08/31/2021", "09/15/2021",
                "09/30/2021", "10/15/2021", "10/31/2021", "11/15/2021", "11/30/2021", "12/15/2021", "12/31/2021", "01/15/2022", "01/31/2022",
                "02/15/2022", "02/28/2022", "03/15/2022", "03/31/2022", "04/15/2022", "04/30/2022", "05/15/2022", "05/31/2022", "06/15/2022",
                "06/30/2022", "07/15/2022", "07/31/2022", "08/15/2022", "08/31/2022", "09/15/2022", "09/30/2022", "10/15/2022", "10/31/2022",
                "11/15/2022", "11/30/2022", "12/15/2022", "12/31/2022", "01/15/2023", "01/31/2023", "02/15/2023", "02/28/2023", "03/15/2023",
                "03/31/2023", "04/15/2023", "04/30/2023", "05/15/2023", "05/31/2023", "06/15/2023", "06/30/2023", "07/15/2023", "07/31/2023",
                "08/15/2023", "08/31/2023", "09/15/2023", "09/30/2023", "10/15/2023", "10/31/2023", "11/15/2023", "11/30/2023", "12/15/2023",
                "12/31/2023", "01/15/2024", "01/31/2024", "02/15/2024", "02/29/2024", "03/15/2024", "03/31/2024", "04/15/2024", "04/30/2024",
                "05/15/2024", "05/31/2024", "06/15/2024", "06/30/2024", "07/15/2024", "07/31/2024", "08/15/2024", "08/31/2024", "09/15/2024",
                "09/30/2024", "10/15/2024",
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GeneratePayDates_SemiMonthly_GreaterThanMidDay()
        {
            var result = _service.GeneratePayDates(PayTypes.SemiMonthly, Convert.ToDateTime("11/20/2019"), Convert.ToDateTime("10/28/2024"));
            var expected = new[]
            {
                "11/30/2019", "12/15/2019", "12/31/2019", "01/15/2020", "01/31/2020", "02/15/2020", "02/29/2020", "03/15/2020",
                "03/31/2020", "04/15/2020", "04/30/2020", "05/15/2020", "05/31/2020", "06/15/2020", "06/30/2020", "07/15/2020", "07/31/2020",
                "08/15/2020", "08/31/2020", "09/15/2020", "09/30/2020", "10/15/2020", "10/31/2020", "11/15/2020", "11/30/2020", "12/15/2020",
                "12/31/2020", "01/15/2021", "01/31/2021", "02/15/2021", "02/28/2021", "03/15/2021", "03/31/2021", "04/15/2021", "04/30/2021",
                "05/15/2021", "05/31/2021", "06/15/2021", "06/30/2021", "07/15/2021", "07/31/2021", "08/15/2021", "08/31/2021", "09/15/2021",
                "09/30/2021", "10/15/2021", "10/31/2021", "11/15/2021", "11/30/2021", "12/15/2021", "12/31/2021", "01/15/2022", "01/31/2022",
                "02/15/2022", "02/28/2022", "03/15/2022", "03/31/2022", "04/15/2022", "04/30/2022", "05/15/2022", "05/31/2022", "06/15/2022",
                "06/30/2022", "07/15/2022", "07/31/2022", "08/15/2022", "08/31/2022", "09/15/2022", "09/30/2022", "10/15/2022", "10/31/2022",
                "11/15/2022", "11/30/2022", "12/15/2022", "12/31/2022", "01/15/2023", "01/31/2023", "02/15/2023", "02/28/2023", "03/15/2023",
                "03/31/2023", "04/15/2023", "04/30/2023", "05/15/2023", "05/31/2023", "06/15/2023", "06/30/2023", "07/15/2023", "07/31/2023",
                "08/15/2023", "08/31/2023", "09/15/2023", "09/30/2023", "10/15/2023", "10/31/2023", "11/15/2023", "11/30/2023", "12/15/2023",
                "12/31/2023", "01/15/2024", "01/31/2024", "02/15/2024", "02/29/2024", "03/15/2024", "03/31/2024", "04/15/2024", "04/30/2024",
                "05/15/2024", "05/31/2024", "06/15/2024", "06/30/2024", "07/15/2024", "07/31/2024", "08/15/2024", "08/31/2024", "09/15/2024",
                "09/30/2024", "10/15/2024",
            };
            CheckDates(expected, result);
        }

        [Fact]
        public void GetNthPayDateFromStartDate_Test31StartDate()
        {
            var result = _service.GetNthPayDateFromStartDate(PayTypes.Monthly, Convert.ToDateTime("10/31/2021"), 4);
            CheckDate("02/28/2022", result);
        }

        [Fact]
        public void GetNthPayDateFromStartDate_Test10thDateFromStartDate()
        {
            var result = _service.GetNthPayDateFromStartDate(PayTypes.Monthly, Convert.ToDateTime("10/31/2021"), 10);
            CheckDate("08/31/2022", result);
        }

        [Fact]
        public void GetNthPayDateFromStartDate_Test11thDateFromStartDate()
        {
            var result = _service.GetNthPayDateFromStartDate(PayTypes.Monthly, Convert.ToDateTime("10/31/2021"), 11);
            CheckDate("09/30/2022", result);
        }

        private static void CheckDates(string[] expected, IReadOnlyCollection<DateTime> actual)
        {
            var iterator = 0;
            Assert.Equal(expected.Length, actual.Count);
            foreach (var date in actual)
            {
                Assert.Equal(expected[iterator], date.ToString("MM/dd/yyyy"));
                iterator++;
            }
        }

        private static void CheckDate(string expected, DateTime actual)
        {
            Assert.Equal(expected, actual.ToString("MM/dd/yyyy"));
        }
    }
}
